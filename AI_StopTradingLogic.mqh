//+------------------------------------------------------------------+
//|                      AI_StopTradingLogic.mqh                     |
//|     ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î (Stop Trading)     |
//+------------------------------------------------------------------+
#ifndef __AI_STOPTRADINGLOGIC_MQH__ // ‡πÄ‡∏û‡∏¥‡πà‡∏° #ifndef/#define/#endif ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Include ‡∏ã‡πâ‡∏≥
#define __AI_STOPTRADINGLOGIC_MQH__

#include "AI_Conditions.mqh"
#include "Settings.mqh"

double lastEntryScore = 0.0;
int ConsecutiveLossCount = 0;
double CumulativePnL = 0.0;
double AIScoreHistory[10];
int AIScoreIndex = 0;

// === Trading Frequency + Smart Delay ===
datetime lastTradeTime = 0;
int MinTradeIntervalSeconds = 300; // ‡∏£‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
int ConsecutiveLowAIScore = 0;
int MaxLowAIScoreAllowed = 5;

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô OnTick ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
void UpdatePnLStatus(double lastTradePnL)
{
   CumulativePnL += lastTradePnL;
   if(lastTradePnL < 0)
      ConsecutiveLossCount++;
   else
      ConsecutiveLossCount = 0;
}

//+------------------------------------------------------------------+
//| Frequency Check                                                  |
//+------------------------------------------------------------------+
bool IsEntryCooldownOver()
{
   return (TimeCurrent() - lastTradeTime >= MinTradeIntervalSeconds);
}

void RecordAIScore(double score)
{
   if(score < 0.4)
      ConsecutiveLowAIScore++;
   else
      ConsecutiveLowAIScore = 0;
}

bool IsDrawdownExceeded()
{
   double maxDD = 10.0; // Max drawdown %
   double equity = AccountInfoDouble(ACCOUNT_EQUITY);
   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double dd = 100.0 * (1.0 - equity / balance);
   if(dd >= maxDD)
   {
      PrintFormat("üõë StopTrading: Drawdown %.2f%% ‚â• %.2f%%", dd, maxDD);
      return true;
   }
   return false;
}


bool IsLowAIScoreStreak()
{
   return (ConsecutiveLowAIScore >= MaxLowAIScoreAllowed);
   /*
   int count = 0;
   int limit = MathMin(AIScoreIndex, 10);
   for(int i = 0; i < limit; i++)
   {
      if(AIScoreHistory[i] < 0.4)
         count++;
   }
   return (count >= AILowScoreThreshold);
   */
}

bool IsTimeBlocked()
{
   // --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Enable/Disable ---
   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Input ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Settings.mqh ‡∏Å‡πà‡∏≠‡∏ô
   if (!EnableTimeBlock) // ‡∏ñ‡πâ‡∏≤ Input EnableTimeBlock ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false (‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
   {
      return false;      // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false (‡πÑ‡∏°‡πà Block) ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
   }
   // --- ‡∏ñ‡πâ‡∏≤ EnableTimeBlock ‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ---

   datetime now = TimeLocal();
   string currentTimeStr = TimeToString(now, TIME_MINUTES);

   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
   if((BlockStartTime < BlockEndTime && currentTimeStr >= BlockStartTime && currentTimeStr <= BlockEndTime) ||
      (BlockStartTime > BlockEndTime && (currentTimeStr >= BlockStartTime || currentTimeStr <= BlockEndTime)))
      return true; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ Block

   // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤
   return false; // ‡πÑ‡∏°‡πà Block
}

//+------------------------------------------------------------------+
//| ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ Position ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß                |
//+------------------------------------------------------------------+
int BarsSinceEntry()
{
   if(!PositionSelect(_Symbol)) return 0;

   datetime entryTime = (datetime)PositionGetInteger(POSITION_TIME);
   int barsAgo = iBarShift(_Symbol, _Period, entryTime);
   return (barsAgo >= 0) ? barsAgo : 0;
}

//+------------------------------------------------------------------+
//| ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å history                        |
//+------------------------------------------------------------------+
double GetLastClosedTradeProfit()
{
   int deals = HistoryDealsTotal();
   if(deals < 1) 
      return(0.0);

   ulong ticket = HistoryDealGetTicket(deals - 1);
   if(HistoryDealSelect(ticket))
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á property
      return( HistoryDealGetDouble(ticket, DEAL_PROFIT) );

   return(0.0);
}


//+------------------------------------------------------------------+
//| ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î                                 |
//+------------------------------------------------------------------+
bool ShouldStopTrading()
{
   // 1) ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
   if(!EnableTrading)
   {
      Print("üõë StopTrading: Trading disabled");
      return(true);
   }
   // 2) Cooldown ‚Ä¶
   if(TimeCurrent() - lastTradeTime < MinTradeIntervalSeconds)
   {
      PrintFormat("üõë StopTrading: Cooldown Active (%d sec)", MinTradeIntervalSeconds);
      return(true);
   }
   
   // 3) ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô ...
   static int lossStreak = 0;
   double lastPnL = GetLastClosedTradeProfit();
   if(lastPnL < 0.0) lossStreak++; else lossStreak = 0;
   if(lossStreak >= MaxConsecutiveLosses)
   {
      PrintFormat("üõë StopTrading: MaxConsecutiveLosses=%d reached", lossStreak);
      return(true);
   }
   // 4) ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∞‡∏™‡∏° ...
   static double cumLoss = 0.0;
   if(lastPnL < 0.0) cumLoss += lastPnL;
   if(cumLoss <= MaxCumulativeLoss)
   {
      PrintFormat("üõë StopTrading: MaxCumulativeLoss=%.2f reached (cumLoss=%.2f)", MaxCumulativeLoss, cumLoss);
      return(true);
   }
   // 5) AI Score ‡∏ï‡πà‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô ...
   static int aiLowStreak = 0;
   if(lastEntryScore <= AI_EntryThresholdLow) aiLowStreak++; else aiLowStreak = 0;
   if(aiLowStreak >= AILowScoreThreshold)
   {
      PrintFormat("üõë StopTrading: Low AI score streak=%d ‚â• %d", aiLowStreak, AILowScoreThreshold);
      return(true);
   }
   // 6) Drawdown Pips ...
   double ddPips = (AccountInfoDouble(ACCOUNT_BALANCE) - AccountInfoDouble(ACCOUNT_EQUITY)) / _Point;
   if(ddPips >= MaxDrawdownPips)
   {
      PrintFormat("üõë StopTrading: DrawdownPips=%.1f ‚â• %d", ddPips, MaxDrawdownPips);
      return(true);
   }
   // 7) Drawdown % ...
   double ddPercent = 100.0 * (AccountInfoDouble(ACCOUNT_BALANCE) - AccountInfoDouble(ACCOUNT_EQUITY))
                      / AccountInfoDouble(ACCOUNT_BALANCE);
   if(ddPercent >= MaxAllowedDrawdownPercent)
   {
      PrintFormat("üõë StopTrading: Drawdown%%=%.2f%% ‚â• %.2f%%", ddPercent, MaxAllowedDrawdownPercent);
      return(true);
   }
   // 8) ‡∏ñ‡∏∑‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ...
   if(PositionSelect(_Symbol))
   {
      int barsHeld = BarsSinceEntry();
      if(barsHeld >= MaxBarsHolding)
      {
         PrintFormat("üõë StopTrading: Held %d bars ‚â• %d", barsHeld, MaxBarsHolding);
         return(true);
      }
   }
   // 9) Time‚ÄëBlock / News‚ÄëBlock ...
   if(EnableTimeBlock && IsTimeBlocked())
   {
      Print("üõë StopTrading: Time-based block active");
      return(true);
   }
   if(CheckNewsHighImpact())
   {
      Print("üõë StopTrading: High impact news detected");
      return(true);
   }

   // ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Üí ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ
   return(false);
}


#endif // __AI_STOPTRADINGLOGIC_MQH__
